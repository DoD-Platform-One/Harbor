# Big Bang Additions
domain: dev.bigbang.mil
istio:
  enabled: false
  hardened:
    enabled: false
    customAuthorizationPolicies: []
    # - name: "allow-nothing"
    #   enabled: true
    #   spec: {}
    monitoring:
      enabled: false
      namespaces:
        - monitoring
      principals:
        - cluster.local/ns/monitoring/sa/monitoring-monitoring-kube-prometheus
    outboundTrafficPolicyMode: "REGISTRY_ONLY"
    customServiceEntries: []
      # - name: "allow-google"
      #   enabled: true
      #   spec:
      #     hosts:
      #       - "www.google.com"
      #       - "google.com"
      #     location: MESH_EXTERNAL
      #     ports:
      #       - number: 443
      #         protocol: TLS
      #         name: https
      #     resolution: DNS
  mtls:
    # -- STRICT = Allow only mutual TLS traffic,
    # PERMISSIVE = Allow both plain text and mutual TLS traffic
    mode: STRICT
  harbor:
    gateways:
    - "istio-system/public"
    hosts:
    - "harbor.{{ .Values.domain }}"
  injection: disabled

monitoring:
  enabled: false
  namespace: monitoring

networkPolicies:
  enabled: false
  ingressLabels:
    app: istio-ingressgateway
    istio: ingressgateway
  # Additional network policies
  # ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  additionalPolicies: []

# Default to false, override in openshift-test-values.yaml
openshift: false

bbtests:
  enabled: false
  cypress:
    artifacts: true
    envs:
      cypress_url: "http://harbor:80"
      cypress_user: "admin"
      cypress_harbor_password: "Harbor12345"
      cypress_project: "bbcypress-test"
  scripts:
    image: "registry1.dso.mil/bigbang-ci/devops-tester:1.1.2"
    additionalVolumes:
      - name: docker-config
        secret:
          secretName: private-registry
          items:
          - key: .dockerconfigjson
            path: auth.json
    additionalVolumeMounts:
      - name: docker-config
        mountPath: /.docker/
    envs:
      HARBOR_USER: "admin"
      HARBOR_PASS: "Harbor12345"
      HARBOR_REGISTRY: "harbor-core:80"
      HARBOR_PROJECT: "library"

## postgresql dependency values
postgresql:
  # If `true`, the Postgresql dependency is enabled
  enabled: true

  auth:
    # PostgreSQL User to create
    username: "harborUser"
    # PostgreSQL Password for the new user
    password: "harborPW"
    database: "harborUser"

  maxIdleConns: 100
  # The maximum number of open connections to the database per pod (core+exporter).
  # If it <= 0, then there is no limit on the number of open connections.
  # Note: the default number of connections is 1024 for harbor's postgres.
  maxOpenConns: 900
  # PostgreSQL network policy configuration
  networkPolicy:
    enabled: false
  # Added by BigBang
  # change bitnami sub-chart upstream image to pull from registry1.dso.mil
  # this image is only used for dev and CI pipelines
  global:
    imagePullSecrets:
      - private-registry
    security: 
      allowInsecureImages: true
  image:
    registry: registry1.dso.mil
    repository: ironbank/opensource/postgres/postgresql
    tag: "17.6"
    debug: true
  # used in:
  # deps/postgresql/templates/statefulset-readreplicas.yaml
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
    runAsGroup: 1001

  primary:
    extraVolumeMounts:
      - name: runtime
        mountPath: /var/run/postgresql
    extraVolumes:
      - name: runtime
        emptyDir: { }
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsGroup: 1001
      capabilities:
        drop:
          - ALL
  existingSecret: ""
  resources:
    requests:
      cpu: "250m"
      memory: "256Mi"
    limits:
      cpu: "250m"
      memory: "256Mi"
  podAnnotations: {}
  initdbUser: harborUser
  initdbPassword: harborPW
  # initdbScripts:
  #   initial-notaryserver.sql: |
  #     CREATE USER serveruser with encrypted password 'harborPW';
  #     CREATE DATABASE notary_server WITH OWNER serveruser;
  #   initial-notarysigner.sql: |
  #     CREATE USER signeruser with encrypted password 'harborPW';
  #     CREATE DATABASE notary_signer WITH OWNER signeruser;

  ## External PostgreSQL configuration
  ## All of these values are only used when postgresql.enabled is set to false
  ## @param externalDatabase.host Database host
  ## @param externalDatabase.port Database port number
  ## @param externalDatabase.user Non-root username for Harbor
  ## @param externalDatabase.password Password for the non-root username for Harbor
  ## @param externalDatabase.sslmode External database ssl mode
  ## @param externalDatabase.coreDatabase External database name for core
  ## @param externalDatabase.notaryServerDatabase External database name for notary server
  ## @param externalDatabase.notaryServerUsername External database username for notary server
  ## @param externalDatabase.notaryServerPassword External database password for notary server
  ## @param externalDatabase.notarySignerDatabase External database name for notary signer
  ## @param externalDatabase.notarySignerUsername External database username for notary signer
  ## @param externalDatabase.notarySignerPassword External database password for notary signer
  ##
  externalDatabase:
    host: localhost
    port: 5432
    user: bn_harbor
    password: ""
    sslmode: disable
    coreDatabase: ""
    # notaryServerDatabase: ""
    # notaryServerUsername: ""
    # notaryServerPassword: ""
    # notarySignerDatabase: ""
    # notarySignerUsername: ""
    # notarySignerPassword: ""
  ## Additional deployment labels
  podLabels: {}

# -- BigBang HA Redis Passthrough
redis-bb:
  enabled: true
  networkPolicies:
    enabled: true

  # pass throughs to BigBang's redis
  # https://repo1.dso.mil/platform-one/big-bang/apps/sandbox/redis/-/blob/main/chart/values.yaml
  upstream:
    auth:
      enabled: false
    istio:
      redis:
        enabled: false
    image:
      tag: 8.2.2
      pullSecrets:
      - private-registry
    master:
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          memory: 256Mi
          cpu: 100m
      containerSecurityContext:
        enabled: true
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        capabilities:
          drop:
          - ALL
    replica:
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          memory: 256Mi
          cpu: 100m
      containerSecurityContext:
        enabled: true
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        capabilities:
          drop:
          - ALL
      readinessProbe:
        initialDelaySeconds: 5
        periodSeconds: 10
        timeoutSeconds: 30
        successThreshold: 1
        failureThreshold: 3
        tcpSocket:
          port: 6379
    commonConfiguration: |-
      # Enable AOF https://redis.io/topics/persistence#append-only-file
      appendonly no
      maxmemory 200mb
      maxmemory-policy allkeys-lru
      save ""
     
## Harbor upstream values 
upstream:
  # Use this set to assign a list of default pullSecrets
  imagePullSecrets:
  - name: private-registry

  ## set Container Security Context to comply with PSP restricted policy if necessary
  ## each of the conatiner will apply the same security context
  ## containerSecurityContext:{} is initially an empty yaml that you could edit it on demand, we just filled with a common template for convenience
  containerSecurityContext:
    # privileged: false
    # allowPrivilegeEscalation: false
    # seccompProfile:
    #   type: RuntimeDefault
    # runAsNonRoot: true
    # runAsUser: 1000
    runAsGroup: 1000
    capabilities:
      drop:
        - ALL

  # If service exposed via "ingress", the Nginx will not be used
  nginx:
    image:
      repository: registry1.dso.mil/ironbank/opensource/nginx/nginx
      tag: 1.29.1
      pullSecrets:
      - private-registry
    # set the service account to be used, default if left empty
    serviceAccountName: ""
    # mount the service account token
    automountServiceAccountToken: false
    replicas: 1
    revisionHistoryLimit: 10
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        cpu: 100m
        memory: 256Mi

  portal:
    image:
      repository: registry1.dso.mil/ironbank/opensource/goharbor/harbor-portal
      tag: v2.14.0
      pullSecrets:
      - private-registry
    # set the service account to be used, default if left empty
    serviceAccountName: ""
    # mount the service account token
    automountServiceAccountToken: false
    replicas: 1
    revisionHistoryLimit: 10
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        cpu: 100m
        memory: 256Mi

  core:
    image:
      repository: registry1.dso.mil/ironbank/opensource/goharbor/harbor-core
      tag: v2.14.0
      pullSecrets:
      - private-registry
    # set the service account to be used, default if left empty
    serviceAccountName: ""
    # mount the service account token
    automountServiceAccountToken: false
    replicas: 1
    revisionHistoryLimit: 10
    ## Startup probe values
    startupProbe:
      enabled: true
      initialDelaySeconds: 30
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        cpu: 100m
        memory: 256Mi

  jobservice:
    image:
      repository: registry1.dso.mil/ironbank/opensource/goharbor/harbor-jobservice
      tag: v2.14.0
      pullSecrets:
      - private-registry
    # set the service account to be used, default if left empty
    serviceAccountName: ""
    # mount the service account token
    automountServiceAccountToken: false
    replicas: 1
    revisionHistoryLimit: 10
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        cpu: 100m
        memory: 256Mi

  registry:
    registry:
      image:
        repository: registry1.dso.mil/ironbank/opensource/goharbor/registry
        tag: v2.14.0
        pullSecrets:
        - private-registry
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          cpu: 100m
          memory: 256Mi
      extraEnvVars: []
    controller:
      image:
        repository: registry1.dso.mil/ironbank/opensource/goharbor/harbor-registryctl
        tag: v2.14.0
        pullSecrets:
        - private-registry
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          cpu: 100m
          memory: 256Mi

  trivy:
    # enabled the flag to enable Trivy scanner
    enabled: true
    image:
      # repository the repository for Trivy adapter image
      repository: registry1.dso.mil/ironbank/opensource/goharbor/trivy-adapter
      # tag the tag for Trivy adapter image
      tag: v2.14.0
      pullSecrets:
      - private-registry
    # set the service account to be used, default if left empty
    serviceAccountName: ""
    # mount the service account token
    automountServiceAccountToken: false
    # replicas the number of Pod replicas
    replicas: 1
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 1
        memory: 1Gi

  database:
    # if external database is used, set "type" to "external"
    # and fill the connection informations in "external" section
    maxIdleConns: "100"
    maxOpenConns: "1000"
    type: external
    internal:
      image:
        repository: goharbor/harbor-db
        tag: v2.14.0
      # set the service account to be used, default if left empty
      serviceAccountName: ""
      # mount the service account token
      automountServiceAccountToken: false
      #image:
      #  repository: goharbor/harbor-db
      #  tag: v2.10.1
      # The initial superuser password for internal database
      password: "changeit"
      # The size limit for Shared memory, pgSQL use it for shared_buffer
      # More details see:
      # https://github.com/goharbor/harbor/issues/15034
      shmSizeLimit: 512Mi
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          cpu: 100m
          memory: 256Mi
      initContainer:
        migrator: {}
        resources:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            cpu: 100m
            memory: 128Mi
        permissions: {}
    external:
      host: "harbor-postgresql"
      port: "5432"
      username: "harborUser"
      password: "harborPW"
      coreDatabase: "harborUser"

  redis:
    # if external Redis is used, set "type" to "external"
    # and fill the connection informations in "external" section
    type: external
    internal:
      image:
        repository: goharbor/redis-photon
        tag: v2.14.0
        pullSecrets:
        - private-registry
      # set the service account to be used, default if left empty
      serviceAccountName: ""
      # mount the service account token
      automountServiceAccountToken: false
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          memory: 256Mi
          cpu: 100m
    external:
      # support redis, redis+sentinel
      # addr for redis: <host_redis>:<port_redis>
      # addr for redis+sentinel: <host_sentinel1>:<port_sentinel1>,<host_sentinel2>:<port_sentinel2>,<host_sentinel3>:<port_sentinel3>
      addr: "redis-bb-master:6379"

  exporter:
    image:
      repository: registry1.dso.mil/ironbank/opensource/goharbor/harbor-exporter
      tag: v2.14.0
      pullSecrets:
      - private-registry
    serviceAccountName: ""
    # mount the service account token
    automountServiceAccountToken: false
    replicas: 1
    revisionHistoryLimit: 10
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        cpu: 100m
        memory: 256Mi